// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2083.robot;

import org.usfirst.frc.team2083.robot.commands.ArmCommand;
import org.usfirst.frc.team2083.robot.commands.CommandBase;
import org.usfirst.frc.team2083.robot.commands.DriveCommand;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachChevalDeFris;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachDrawbridge;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachLowBar;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachMoat;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachPortcullis;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachRamparts;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachRockWall;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachRoughTerrain;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandBreachSallyPort;
import org.usfirst.frc.team2083.robot.commands.auto.AutoCommandMoveArm;

import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	// Robot commands
	DriveCommand driveCommand;
    ArmCommand armCommand;

    // Autonomous commands and selection
    Command autonomousCommand;
    SendableChooser autoChooser;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        System.out.println("ROBOT INIT");

        RobotMap.leftForwardMotorController = new CANJaguar(RobotMap.LEFT_FORWARD_MOTOR_CONTROLLER_ID);
        RobotMap.leftBackMotorController = new CANJaguar(RobotMap.LEFT_BACK_MOTOR_CONTROLLER_ID);
        RobotMap.rightForwardMotorController = new CANJaguar(RobotMap.RIGHT_FORWARD_MOTOR_CONTROLLER_ID);
        RobotMap.rightBackMotorController = new CANJaguar(RobotMap.RIGHT_BACK_MOTOR_CONTROLLER_ID);
        
        RobotMap.leftForwardMotorController.configNeutralMode(CANJaguar.NeutralMode.Brake);
        RobotMap.leftBackMotorController.configNeutralMode(CANJaguar.NeutralMode.Brake);
        RobotMap.rightForwardMotorController.configNeutralMode(CANJaguar.NeutralMode.Brake);
        RobotMap.rightBackMotorController.configNeutralMode(CANJaguar.NeutralMode.Brake);
        
        RobotMap.rightBackMotorController.setVoltageMode();
        RobotMap.rightForwardMotorController.setVoltageMode();
        RobotMap.leftBackMotorController.setVoltageMode();
        RobotMap.leftForwardMotorController.setVoltageMode();
        
        RobotMap.armBarMotorController = new CANTalon(RobotMap.ARM_BAR_MOTOR_CONTROLLER_ID);
        RobotMap.armBarMotorController.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
        
        RobotMap.armBarMotorController.enableBrakeMode(true);
        RobotMap.armBarMotorController.ConfigFwdLimitSwitchNormallyOpen(false);
        RobotMap.armBarMotorController.ConfigRevLimitSwitchNormallyOpen(false);
        //RobotMap.armBarMotorController.configPeakOutputVoltage(6, -6);
        
//        RobotMap.armBarMotorController.setFeedbackDevice(CANTalon.FeedbackDevice.AnalogPot);
//        RobotMap.armBarMotorController.setForwardSoftLimit(756);
//        RobotMap.armBarMotorController.enableForwardSoftLimit(true);
//        RobotMap.armBarMotorController.setReverseSoftLimit(100);  //was 8
//        RobotMap.armBarMotorController.enableReverseSoftLimit(true);
                
//        double p = 1;
//        double i = .01;
//        double d = 0;
//        double f = 0;
//        int izone = 0;
//        double closeLoopRampRate = 10;
//        int profile = 0;
        //RobotMap.armBarMotorController.setPID(p , i , d, f, izone, closeLoopRampRate, profile);
       // RobotMap.armBarMotorController.reverseSensor(false);
        
        
//        RobotMap.leftFront.setPositionMode(CANJaguar.kQuadEncoder, 360, 0.01, 0, 0);
//        RobotMap.rightFront.setPositionMode(CANJaguar.kQuadEncoder, 250, 0.01, 0, 0);
        
//        RobotMap.leftFront.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
//        RobotMap.rightFront.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
//        RobotMap.leftFront.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
//        RobotMap.rightFront.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
                                    
        // Initialize all subsystems
        CommandBase.init();
        driveCommand = new DriveCommand();
        driveCommand.disableControl();

        armCommand = new ArmCommand();
        armCommand.disableControl();
                
        // Autonomous setup.
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Lower Arm Only (Default)", new AutoCommandMoveArm());
        autoChooser.addObject("Breach Portcullis", new AutoCommandBreachPortcullis());
        autoChooser.addObject("Breach Cheval de Fris", new AutoCommandBreachChevalDeFris());
        autoChooser.addObject("Breach Moat", new AutoCommandBreachMoat());
        autoChooser.addObject("Breach Ramparts", new AutoCommandBreachRamparts());
        autoChooser.addObject("Breach Drawbridge", new AutoCommandBreachDrawbridge());
        autoChooser.addObject("Breach Sally Port", new AutoCommandBreachSallyPort());
        autoChooser.addObject("Breach Rock Wall", new AutoCommandBreachRockWall());
        autoChooser.addObject("Breach Rough Terrain", new AutoCommandBreachRoughTerrain());
        autoChooser.addObject("Breach Low Bar", new AutoCommandBreachLowBar());
        
        SmartDashboard.putData("Autonmous Mode", autoChooser);        
    }

    public void autonomousInit() {
        System.out.println("AUTONOMOUS INIT");

        driveCommand.enableControl();
        armCommand.enableControl();

        autonomousCommand = (Command) autoChooser.getSelected();
        autonomousCommand.start();        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    	Scheduler.getInstance().run();
    }

    public void teleopInit() {
        System.out.println("TELEOP INIT");

        driveCommand.enableControl();
        driveCommand.start();
        armCommand.enableControl();
        armCommand.start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
